import React from 'react';

import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';

import { filterSliceState, setCategoryId, setCurrentPage, setFilters, SortPropertyEnum } from '../redux/slices/filterSlice';
import Categories from '../components/Categories';
import Sort from '../components/Sort';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Pagination from '../components/Pagination/index';

import { fetchPizzas, PizzaItem, PizzasItemParams, Status } from '../redux/slices/pizzaSlice';
import { useAppDispatch } from '../redux/store';

const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { categoryId, sort, currentPage, searchValue } = useSelector((state: { filterReducer: { categoryId: number; sort: { name: string; sortProperty: SortPropertyEnum }; currentPage: number; searchValue: string } }) => state.filterReducer);

  const { items, status } = useSelector((state: { pizza: { items: []; status: Status } }) => state.pizza);

  const onChangeCategory = (id: number) => {
    console.log(id);
    dispatch(setCategoryId(id));
  };
  const onChangePage = (number: number) => {
    dispatch(setCurrentPage(number));
  };

  const getPizzas = async () => {
    const category = categoryId > 0 ? `${categoryId}` : '';
    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const search = searchValue ? searchValue : '';

    dispatch(fetchPizzas({ category, sortBy, order, search, currentPage }));

    window.scrollTo(0, 0);
  };

  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ -> | –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –≤—à–∏–≤–∞—Ç—å –≤ URL –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  // React.useEffect(() => {
  //   if (isMounted.current) {
  //     const queryString = qs.stringify({
  //       sortProperty: sort.sortProperty,
  //       categoryId,
  //       currentPage,
  //     });
  //     // console.log(queryString);
  //     navigate(`?${queryString}`);
  //   }
  //   isMounted.current = true;
  // }, [categoryId, sort.sortProperty, currentPage]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–¥–Ω–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ redux. –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –º—ã –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –∏—Ö –≤ –æ–±—å–µ–∫—Ç, –∞ –ø–æ—Ç–æ–º –≤—Å–µ —ç—Ç–æ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ —Ä–µ–¥–∞–∫—Å
  // React.useEffect(() => {
  //   if (window.location.search) {
  //     const params = qs.parse(window.location.search.substring(1)) as unknown as PizzasItemParams;
  //     const sort = sortList.find((obj) => obj.sortProperty === params.sortBy);

  //     dispatch(setFilters({ searchValue: params.search, categoryId: Number(params.category), currentPage: Number(params.currentPage), sort: sort || sortList[0] }));
  //     isSearch.current = true;
  //   }
  // }, []);
  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  React.useEffect(() => {
    getPizzas();
    isSearch.current = false;
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  const pizzas = items.map((obj: PizzaItem) => <PizzaBlock {...obj} />);

  const skeletons = [...new Array(10)].map((_, index) => <Skeleton key={index} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories categoryValue={categoryId} onClickCategory={(id) => onChangeCategory(id)} />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className="content__eror-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, üòï</h2>
          <p>–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º</p>
        </div>
      ) : (
        <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
      )}

      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
